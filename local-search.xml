<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>centos7部署openvpn</title>
    <link href="/2022/08/30/centos7%E9%83%A8%E7%BD%B2openvpn/"/>
    <url>/2022/08/30/centos7%E9%83%A8%E7%BD%B2openvpn/</url>
    
    <content type="html"><![CDATA[<h1 id="cenos7-openvpn部署"><a href="#cenos7-openvpn部署" class="headerlink" title="cenos7 openvpn部署"></a>cenos7 openvpn部署</h1><span id="more"></span><p>[TOC]</p><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><ul><li><p>openvpn 服务端 centos7</p><p>IP 192.168.1.99</p><p>test-server 192.168.1.250</p><p>关闭SElinux</p><p>关闭防火墙</p></li></ul><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><h2 id="1-epel源配置"><a href="#1-epel源配置" class="headerlink" title="1.epel源配置"></a>1.epel源配置</h2><p>这里我采用的是阿里云</p><p><a href="https://developer.aliyun.com/mirror/epel?spm=a2c6h.13651102.0.0.3b0f1b116S0OUX">https://developer.aliyun.com/mirror/epel?spm=a2c6h.13651102.0.0.3b0f1b116S0OUX</a></p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">centos7执行该命令</span><br>wget -O /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo<br>[root@VPN ~]# yum repolist<br>Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br> * base: mirrors.aliyun.com<br> * extras: mirrors.aliyun.com<br> * updates: mirrors.aliyun.com<br>repo id                                                                               repo name                                                                                                           status<br>base/7/x86_64                                                                         CentOS-7 - Base                                                                                                     10,072<br>epel/x86_64   #这里显示已经有EPEL仓库了，说明配置生效了                                                                        Extra Packages for Enterprise Linux 7 - x86_64                                                                      13,757<br>extras/7/x86_64                                                                       CentOS-7 - Extras                                                                                                      512<br>updates/7/x86_64                                                                      CentOS-7 - Updates                                                                                                   4,135<br>repolist: 28,476<br></code></pre></td></tr></table></figure><h2 id="2-openvpn安装"><a href="#2-openvpn安装" class="headerlink" title="2.openvpn安装"></a>2.openvpn安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN easy-rsa]<span class="hljs-comment"># yum -y install openvpn</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># rpm -ql openvpn</span><br>/etc/openvpn<br>/etc/openvpn/client<br>/etc/openvpn/server<br>/run/openvpn-client<br>/run/openvpn-server<br>/usr/lib/systemd/system/openvpn-client@.service<br>/usr/lib/systemd/system/openvpn-server@.service<br>/usr/lib/systemd/system/openvpn@.service<br>/usr/lib/tmpfiles.d/openvpn.conf<br>/usr/lib64/openvpn<br>/usr/lib64/openvpn/plugins<br>/usr/lib64/openvpn/plugins/openvpn-plugin-auth-pam.so<br>/usr/lib64/openvpn/plugins/openvpn-plugin-down-root.so<br>/usr/sbin/openvpn<br>/usr/share/doc/openvpn-2.4.12<br>/usr/share/doc/openvpn-2.4.12/AUTHORS<br>/usr/share/doc/openvpn-2.4.12/COPYING<br>/usr/share/doc/openvpn-2.4.12/COPYRIGHT.GPL<br>/usr/share/doc/openvpn-2.4.12/ChangeLog<br>/usr/share/doc/openvpn-2.4.12/Changes.rst<br>/usr/share/doc/openvpn-2.4.12/README<br>/usr/share/doc/openvpn-2.4.12/README.auth-pam<br>/usr/share/doc/openvpn-2.4.12/README.down-root<br>/usr/share/doc/openvpn-2.4.12/README.systemd<br>/usr/share/doc/openvpn-2.4.12/contrib<br>/usr/share/doc/openvpn-2.4.12/contrib/OCSP_check<br>/usr/share/doc/openvpn-2.4.12/contrib/OCSP_check/OCSP_check.sh<br>/usr/share/doc/openvpn-2.4.12/contrib/README<br>/usr/share/doc/openvpn-2.4.12/contrib/openvpn-fwmarkroute-1.00<br>/usr/share/doc/openvpn-2.4.12/contrib/openvpn-fwmarkroute-1.00/README<br>/usr/share/doc/openvpn-2.4.12/contrib/openvpn-fwmarkroute-1.00/fwmarkroute.down<br>/usr/share/doc/openvpn-2.4.12/contrib/openvpn-fwmarkroute-1.00/fwmarkroute.up<br>/usr/share/doc/openvpn-2.4.12/contrib/pull-resolv-conf<br>/usr/share/doc/openvpn-2.4.12/contrib/pull-resolv-conf/client.down<br>/usr/share/doc/openvpn-2.4.12/contrib/pull-resolv-conf/client.up<br>/usr/share/doc/openvpn-2.4.12/management-notes.txt<br>/usr/share/doc/openvpn-2.4.12/sample<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/README<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/client.conf<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/firewall.sh<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/home.up<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/loopback-client<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/loopback-server<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/office.up<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/openvpn-shutdown.sh<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/openvpn-startup.sh<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/roadwarrior-client.conf<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/roadwarrior-server.conf<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/server.conf<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/static-home.conf<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/static-office.conf<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/tls-home.conf<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/tls-office.conf<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/xinetd-client-config<br>/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/xinetd-server-config<br>/usr/share/doc/openvpn-2.4.12/sample/sample-scripts<br>/usr/share/doc/openvpn-2.4.12/sample/sample-scripts/auth-pam.pl<br>/usr/share/doc/openvpn-2.4.12/sample/sample-scripts/bridge-start<br>/usr/share/doc/openvpn-2.4.12/sample/sample-scripts/bridge-stop<br>/usr/share/doc/openvpn-2.4.12/sample/sample-scripts/ucn.pl<br>/usr/share/doc/openvpn-2.4.12/sample/sample-scripts/verify-cn<br>/usr/share/doc/openvpn-2.4.12/sample/sample-windows<br>/usr/share/doc/openvpn-2.4.12/sample/sample-windows/sample.ovpn<br>/usr/share/man/man8/openvpn.8.gz<br>/var/lib/openvpn<br></code></pre></td></tr></table></figure><h1 id="二-准备证书相关文件"><a href="#二-准备证书相关文件" class="headerlink" title="二.准备证书相关文件"></a>二.准备证书相关文件</h1><h2 id="2-1安装easy-rsa"><a href="#2-1安装easy-rsa" class="headerlink" title="2.1安装easy-rsa"></a>2.1安装easy-rsa</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装easy-rsa</span><br>[root@VPN ~]# yum -y install easy-rsa<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下面是easy-rsa安装后生成的包</span><br>[root@VPN ~]# rpm -ql easy-rsa<br>/usr/share/doc/easy-rsa-3.0.8<br>/usr/share/doc/easy-rsa-3.0.8/COPYING.md<br>/usr/share/doc/easy-rsa-3.0.8/ChangeLog<br>/usr/share/doc/easy-rsa-3.0.8/README.md<br>/usr/share/doc/easy-rsa-3.0.8/README.quickstart.md<br>/usr/share/doc/easy-rsa-3.0.8/vars.example<br>/usr/share/easy-rsa<br>/usr/share/easy-rsa/3<br>/usr/share/easy-rsa/3.0<br>/usr/share/easy-rsa/3.0.8<br>/usr/share/easy-rsa/3.0.8/easyrsa<br>/usr/share/easy-rsa/3.0.8/openssl-easyrsa.cnf<br>/usr/share/easy-rsa/3.0.8/x509-types<br>/usr/share/easy-rsa/3.0.8/x509-types/COMMON<br>/usr/share/easy-rsa/3.0.8/x509-types/ca<br>/usr/share/easy-rsa/3.0.8/x509-types/client<br>/usr/share/easy-rsa/3.0.8/x509-types/code-signing<br>/usr/share/easy-rsa/3.0.8/x509-types/email<br>/usr/share/easy-rsa/3.0.8/x509-types/kdc<br>/usr/share/easy-rsa/3.0.8/x509-types/server<br>/usr/share/easy-rsa/3.0.8/x509-types/serverClient<br>/usr/share/licenses/easy-rsa-3.0.8<br>/usr/share/licenses/easy-rsa-3.0.8/gpl-2.0.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将/usr/share/easy-rsa/3和vars.example复制到统一目录下，方便管理</span><br>[root@VPN ~]# mkdir -p /data/easy-rsa; cp -r /usr/share/easy-rsa/3/* /data/easy-rsa<br>[root@VPN ~]# cp -r /usr/share/doc/easy-rsa-3.0.8/vars.example /data/easy-rsa/vars<br><span class="hljs-meta prompt_">#</span><span class="language-bash">easyrsa涉及到证书的生成，vars涉及到证书的配置，所以确认一下有没有复制成功</span><br>[root@VPN ~]# ll /data/easy-rsa/<br>total 96<br>-rwxr-xr-x 1 root root 76946 Aug 24 14:43 easyrsa<br>-rw-r--r-- 1 root root  4616 Aug 24 14:43 openssl-easyrsa.cnf<br>-rw-r--r-- 1 root root  8925 Aug 24 14:44 vars<br>drwxr-xr-x 2 root root   122 Aug 24 14:43 x509-types<br></code></pre></td></tr></table></figure><h2 id="2-2-easyrsa脚本帮助"><a href="#2-2-easyrsa脚本帮助" class="headerlink" title="2.2 easyrsa脚本帮助"></a>2.2 easyrsa脚本帮助</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VPN ~]# cd /data/easy-rsa/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看easyrsa帮助</span><br>[root@VPN easy-rsa]# ./easyrsa <br><br>Note: using Easy-RSA configuration from: /data/easy-rsa/vars<br><br>Easy-RSA 3 usage and overview<br><br>USAGE: easyrsa [options] COMMAND [command-options]<br><br>A list of commands is shown below. To get detailed usage and help for a<br>command, run:<br>  ./easyrsa help COMMAND<br><br>For a listing of options that can be supplied before the command, use:<br>  ./easyrsa help options<br><br>Here is the list of commands available with a short syntax reminder. Use the<br>&#x27;help&#x27; command above to get full usage details.<br><br>  init-pki<br>  build-ca [ cmd-opts ]<br>  gen-dh<br>  gen-req &lt;filename_base&gt; [ cmd-opts ]<br>  sign-req &lt;type&gt; &lt;filename_base&gt;<br>  build-client-full &lt;filename_base&gt; [ cmd-opts ]<br>  build-server-full &lt;filename_base&gt; [ cmd-opts ]<br>  revoke &lt;filename_base&gt; [cmd-opts]<br>  renew &lt;filename_base&gt; [cmd-opts]<br>  build-serverClient-full &lt;filename_base&gt; [ cmd-opts ]<br>  gen-crl<br>  update-db<br>  show-req &lt;filename_base&gt; [ cmd-opts ]<br>  show-cert &lt;filename_base&gt; [ cmd-opts ]<br>  show-ca [ cmd-opts ]<br>  import-req &lt;request_file_path&gt; &lt;short_basename&gt;<br>  export-p7 &lt;filename_base&gt; [ cmd-opts ]<br>  export-p8 &lt;filename_base&gt; [ cmd-opts ]<br>  export-p12 &lt;filename_base&gt; [ cmd-opts ]<br>  set-rsa-pass &lt;filename_base&gt; [ cmd-opts ]<br>  set-ec-pass &lt;filename_base&gt; [ cmd-opts ]<br>  upgrade &lt;type&gt;<br><br>DIRECTORY STATUS (commands would take effect on these locations)<br>  EASYRSA: /data/easy-rsa<br>      PKI: /data/easy-rsa/pki<br></code></pre></td></tr></table></figure><h2 id="2-3初始化PKI生成PKI相关目录和文件"><a href="#2-3初始化PKI生成PKI相关目录和文件" class="headerlink" title="2.3初始化PKI生成PKI相关目录和文件"></a>2.3初始化PKI生成PKI相关目录和文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">证书相关配置，修改刚刚复制到/data/easy-rsa目录下的vars文件（要取消注释）</span><br>[root@VPN easy-rsa]# vim vars<br>set_var EASYRSA_REQ_COUNTRY     &quot;CN&quot;#国家<br>set_var EASYRSA_REQ_PROVINCE    &quot;GD&quot;#省份<br>set_var EASYRSA_REQ_CITY        &quot;Shenzhen&quot;#城市<br>set_var EASYRSA_CA_EXPIRE       36500#CA证书有效期时间，单位天<br>set_var EASYRSA_CERT_EXPIRE     3650#服务器及客户端证书有效期，单位天<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下面几个由于不需要所以我没有启用，可以根据自己需求启动</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">set_var EASYRSA_REQ_ORG        <span class="hljs-string">&quot;Copyleft Certificate Co&quot;</span><span class="hljs-comment">#组织</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">set_var EASYRSA_REQ_EMAIL      <span class="hljs-string">&quot;me@example.net&quot;</span><span class="hljs-comment">#邮箱</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">set_var EASYRSA_REQ_OU         <span class="hljs-string">&quot;My Organizational Unit&quot;</span>拥有者</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">set_var EASYRSA_KEY_SIZE        2048<span class="hljs-comment"># 长度</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">set_var EASYRSA_ALGO            rsa<span class="hljs-comment"># 算法</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开始初始化</span><br>[root@VPN easy-rsa]# ./easyrsa init-pki<br><br>Note: using Easy-RSA configuration from: /data/easy-rsa/vars<br><br>init-pki complete; you may now create a CA or requests.<br>Your newly created PKI dir is: /data/easy-rsa/pki #这里提示增加pki目录<br><br>[root@VPN easy-rsa]# tree<br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki<br>│   ├── openssl-easyrsa.cnf<br>│   ├── private#放置私钥<br>│   ├── reqs#放置证书<br>│   └── safessl-easyrsa.cnf<br>├── vars<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>4 directories, 13 files<br></code></pre></td></tr></table></figure><h3 id="2-4创建CA机构环境"><a href="#2-4创建CA机构环境" class="headerlink" title="2.4创建CA机构环境"></a>2.4创建CA机构环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成CA证书，这里我选择了加密</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">./easyrsa build-ca nopass 不加密跟上nopass,生产环境推荐使用加密</span><br>[root@VPN easy-rsa]# ./easyrsa build-ca<br><br>Note: using Easy-RSA configuration from: /data/easy-rsa/vars<br>Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017<br><br>Enter New CA Key Passphrase: <br>Re-Enter New CA Key Passphrase: <br>Generating RSA private key, 2048 bit long modulus<br>............+++<br>...............+++<br>e is 65537 (0x10001)<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter &#x27;.&#x27;, the field will be left blank.<br>-----<br>Common Name (eg: your user, host, or server name) [Easy-RSA CA]:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里可以自己设置名称，不设置则直接回车即可</span><br>CA creation complete and you may now import and sign cert requests.<br>Your new CA certificate file for publishing is at:<br>/data/easy-rsa/pki/ca.crt<br><br>[root@VPN easy-rsa]# tree<br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki<br>│   ├── ca.crt #CA创建成功<br>│   ├── certs_by_serial<br>│   ├── index.txt<br>│   ├── index.txt.attr<br>│   ├── issued<br>│   ├── openssl-easyrsa.cnf<br>│   ├── private<br>│   │   └── ca.key #CA私钥<br>│   ├── renewed<br>│   │   ├── certs_by_serial<br>│   │   ├── private_by_serial<br>│   │   └── reqs_by_serial<br>│   ├── reqs<br>│   ├── revoked<br>│   │   ├── certs_by_serial<br>│   │   ├── private_by_serial<br>│   │   └── reqs_by_serial<br>│   ├── safessl-easyrsa.cnf<br>│   └── serial<br>├── vars<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>14 directories, 18 files<br><br></code></pre></td></tr></table></figure><h3 id="2-5创建服务端证书"><a href="#2-5创建服务端证书" class="headerlink" title="2.5创建服务端证书"></a>2.5创建服务端证书</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#后续默认就是加密，不需要加密则跟上nopass</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># ./easyrsa gen-req server </span><br><br>Note: using Easy-RSA configuration from: /data/easy-rsa/vars<br>Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017<br>Generating a 2048 bit RSA private key<br>.....................................+++<br>....+++<br>writing new private key to <span class="hljs-string">&#x27;/data/easy-rsa/pki/easy-rsa-24342.8lAGvJ/tmp.htRVAo&#x27;</span><br>Enter PEM pass phrase:<br>Verifying - Enter PEM pass phrase:<br>Verify failure<br>Enter PEM pass phrase:<br>Verifying - Enter PEM pass phrase:<br>-----<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Common Name (eg: your user, host, or server name) [server]:<span class="hljs-comment">#默认回车</span><br><br>Keypair and certificate request completed. Your files are:<br>req: /data/easy-rsa/pki/reqs/server.req<br>key: /data/easy-rsa/pki/private/server.key<br><br>[root@VPN easy-rsa]<span class="hljs-comment"># tree pki/</span><br>pki/<br>├── ca.crt<br>├── certs_by_serial<br>├── index.txt<br>├── index.txt.attr<br>├── issued<br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   └── server.key <span class="hljs-comment">#私钥</span><br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   └── server.req <span class="hljs-comment">#证书申请文件</span><br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>└── serial<br><br>12 directories, 9 files<br></code></pre></td></tr></table></figure><h3 id="2-6颁发服务端证书"><a href="#2-6颁发服务端证书" class="headerlink" title="2.6颁发服务端证书"></a>2.6颁发服务端证书</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#第一个server表示证书的类型,第二个server表示请求文件名的前缀</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># ./easyrsa sign server server</span><br><br>Note: using Easy-RSA configuration from: /data/easy-rsa/vars<br>Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017<br><br><br>You are about to sign the following certificate.<br>Please check over the details shown below <span class="hljs-keyword">for</span> accuracy. Note that this request<br>has not been cryptographically verified. Please be sure it came from a trusted<br><span class="hljs-built_in">source</span> or that you have verified the request checksum with the sender.<br><br>Request subject, to be signed as a server certificate <span class="hljs-keyword">for</span> 3650 days:<br><br>subject=<br>    commonName                = server<br><br><br>Type the word <span class="hljs-string">&#x27;yes&#x27;</span> to <span class="hljs-built_in">continue</span>, or any other input to abort.<br>  Confirm request details: <span class="hljs-built_in">yes</span><span class="hljs-comment">#这里需要输入yes，有CA密码则输入密码</span><br>Using configuration from /data/easy-rsa/pki/easy-rsa-24375.ERrQu2/tmp.ScoPp8<br>Enter pass phrase <span class="hljs-keyword">for</span> /data/easy-rsa/pki/private/ca.key:<br>Check that the request matches the signature<br>Signature ok<br>The Subject<span class="hljs-string">&#x27;s Distinguished Name is as follows</span><br><span class="hljs-string">commonName            :ASN.1 12:&#x27;</span>server<span class="hljs-string">&#x27;</span><br><span class="hljs-string">Certificate is to be certified until Aug 21 11:58:52 2032 GMT (3650 days)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Write out database with 1 new entries</span><br><span class="hljs-string">Data Base Updated</span><br><span class="hljs-string"></span><br><span class="hljs-string">Certificate created at: /data/easy-rsa/pki/issued/server.crt</span><br><span class="hljs-string"></span><br><span class="hljs-string">[root@VPN easy-rsa]# tree pki/</span><br><span class="hljs-string">pki/</span><br><span class="hljs-string">├── ca.crt</span><br><span class="hljs-string">├── certs_by_serial</span><br><span class="hljs-string">│   └── E5AE0001EC2BED6FDB8730D0E1B7ED73.pem #这个跟server本质是一样的</span><br><span class="hljs-string">├── index.txt #index.txt可以看到颁发证书的原数据，有兴趣可以通过cat看下</span><br><span class="hljs-string">├── index.txt.attr</span><br><span class="hljs-string">├── index.txt.attr.old</span><br><span class="hljs-string">├── index.txt.old</span><br><span class="hljs-string">├── issued</span><br><span class="hljs-string">│   └── server.crt #服务器证书</span><br><span class="hljs-string">├── openssl-easyrsa.cnf</span><br><span class="hljs-string">├── private</span><br><span class="hljs-string">│   ├── ca.key</span><br><span class="hljs-string">│   └── server.key</span><br><span class="hljs-string">├── renewed</span><br><span class="hljs-string">│   ├── certs_by_serial</span><br><span class="hljs-string">│   ├── private_by_serial</span><br><span class="hljs-string">│   └── reqs_by_serial</span><br><span class="hljs-string">├── reqs</span><br><span class="hljs-string">│   └── server.req</span><br><span class="hljs-string">├── revoked</span><br><span class="hljs-string">│   ├── certs_by_serial</span><br><span class="hljs-string">│   ├── private_by_serial</span><br><span class="hljs-string">│   └── reqs_by_serial</span><br><span class="hljs-string">├── safessl-easyrsa.cnf</span><br><span class="hljs-string">├── serial</span><br><span class="hljs-string">└── serial.old</span><br><span class="hljs-string"></span><br><span class="hljs-string">12 directories, 14 files</span><br></code></pre></td></tr></table></figure><h3 id="2-7创建Diffie-Hellman密钥"><a href="#2-7创建Diffie-Hellman密钥" class="headerlink" title="2.7创建Diffie-Hellman密钥"></a>2.7创建Diffie-Hellman密钥</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN easy-rsa]<span class="hljs-comment"># ./easyrsa gen-dh</span><br><br>Note: using Easy-RSA configuration from: /data/easy-rsa/vars<br>Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017<br>Generating DH parameters, 2048 bit long safe prime, generator 2<br>This is going to take a long time<brbr><br>DH parameters of size 2048 created at /data/easy-rsa/pki/dh.pem<br><br>[root@VPN easy-rsa]<span class="hljs-comment"># tree pki/</span><br>pki/<br>├── ca.crt<br>├── certs_by_serial<br>│   └── E5AE0001EC2BED6FDB8730D0E1B7ED73.pem<br>├── dh.pem <span class="hljs-comment">#密钥文件</span><br>├── index.txt<br>├── index.txt.attr<br>├── index.txt.attr.old<br>├── index.txt.old<br>├── issued<br>│   └── server.crt<br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   └── server.key<br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   └── server.req<br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>├── serial<br>└── serial.old<br><br>12 directories, 15 files<br></code></pre></td></tr></table></figure><h3 id="2-8准备客户端证书环境"><a href="#2-8准备客户端证书环境" class="headerlink" title="2.8准备客户端证书环境"></a>2.8准备客户端证书环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN easy-rsa]<span class="hljs-comment"># ./easyrsa gen-req test</span><br><br>Note: using Easy-RSA configuration from: /data/easy-rsa/vars<br>Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017<br>Generating a 2048 bit RSA private key<br>......................................+++<br>.................+++<br>writing new private key to <span class="hljs-string">&#x27;/data/easy-rsa/pki/easy-rsa-24477.61A7O3/tmp.UkTGIK&#x27;</span><br>Enter PEM pass phrase:<br>Verifying - Enter PEM pass phrase:<br>-----<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Common Name (eg: your user, host, or server name) [<span class="hljs-built_in">test</span>]:<span class="hljs-comment">#回车接受默认值</span><br><br>Keypair and certificate request completed. Your files are:<br>req: /data/easy-rsa/pki/reqs/test.req<br>key: /data/easy-rsa/pki/private/test.key<br><br>[root@VPN easy-rsa]<span class="hljs-comment"># tree pki/</span><br>pki/<br>├── ca.crt<br>├── certs_by_serial<br>│   └── E5AE0001EC2BED6FDB8730D0E1B7ED73.pem<br>├── dh.pem<br>├── index.txt<br>├── index.txt.attr<br>├── index.txt.attr.old<br>├── index.txt.old<br>├── issued<br>│   └── server.crt<br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   ├── server.key<br>│   └── test.key <span class="hljs-comment">#客户端密钥</span><br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   ├── server.req<br>│   └── test.req <span class="hljs-comment">#客户端申请文件</span><br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>├── serial<br>└── serial.old<br></code></pre></td></tr></table></figure><h3 id="2-9颁发客户端证书"><a href="#2-9颁发客户端证书" class="headerlink" title="2.9颁发客户端证书"></a>2.9颁发客户端证书</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN easy-rsa]<span class="hljs-comment"># ./easyrsa sign client test</span><br><br>Note: using Easy-RSA configuration from: /data/easy-rsa/vars<br>Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017<br><br><br>You are about to sign the following certificate.<br>Please check over the details shown below <span class="hljs-keyword">for</span> accuracy. Note that this request<br>has not been cryptographically verified. Please be sure it came from a trusted<br><span class="hljs-built_in">source</span> or that you have verified the request checksum with the sender.<br><br>Request subject, to be signed as a client certificate <span class="hljs-keyword">for</span> 365 days:<br><br>subject=<br>    commonName                = <span class="hljs-built_in">test</span><br><br><br>Type the word <span class="hljs-string">&#x27;yes&#x27;</span> to <span class="hljs-built_in">continue</span>, or any other input to abort.<br>  Confirm request details: <span class="hljs-built_in">yes</span><br>Using configuration from /data/easy-rsa/pki/easy-rsa-24531.6AY1Oj/tmp.YVcoA3<br>Enter pass phrase <span class="hljs-keyword">for</span> /data/easy-rsa/pki/private/ca.key:<br>Check that the request matches the signature<br>Signature ok<br>The Subject<span class="hljs-string">&#x27;s Distinguished Name is as follows</span><br><span class="hljs-string">commonName            :ASN.1 12:&#x27;</span><span class="hljs-built_in">test</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">Certificate is to be certified until Aug 24 12:51:00 2023 GMT (365 days)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Write out database with 1 new entries</span><br><span class="hljs-string">Data Base Updated</span><br><span class="hljs-string"></span><br><span class="hljs-string">Certificate created at: /data/easy-rsa/pki/issued/test.crt</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="2-10将CA和服务器证书相关文件复制到服务器对应的目录"><a href="#2-10将CA和服务器证书相关文件复制到服务器对应的目录" class="headerlink" title="2.10将CA和服务器证书相关文件复制到服务器对应的目录"></a>2.10将CA和服务器证书相关文件复制到服务器对应的目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建一个目录用于存放服务器端证书，该目录可随意命名</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># mkdir /etc/openvpn/certs</span><br><span class="hljs-comment">#将下面四个文件复制到刚刚创建的目录下</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># cp pki/ca.crt pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/certs/</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># ll /etc/openvpn/certs/</span><br>total 20<br>-rw------- 1 root root 1176 Aug 24 21:08 ca.crt<br>-rw------- 1 root root  424 Aug 24 21:08 dh.pem<br>-rw------- 1 root root 4552 Aug 24 21:08 server.crt<br>-rw------- 1 root root 1834 Aug 24 21:08 server.key<br><br></code></pre></td></tr></table></figure><h3 id="2-11将客户端私钥与证书相关文件复制到服务器相关的目录"><a href="#2-11将客户端私钥与证书相关文件复制到服务器相关的目录" class="headerlink" title="2.11将客户端私钥与证书相关文件复制到服务器相关的目录"></a>2.11将客户端私钥与证书相关文件复制到服务器相关的目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建一个目录用于存放服务器端证书，该目录命名必须与刚刚颁发的用户一致</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># mkdir /etc/openvpn/client/test</span><br><br>[root@VPN easy-rsa]<span class="hljs-comment"># cp pki/ca.crt pki/issued/test.crt pki/private/test.key /etc/openvpn/client/test/</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># ll /etc/openvpn/client/test/</span><br>total 12<br>-rw------- 1 root root 1176 Aug 24 21:13 ca.crt<br>-rw------- 1 root root 1834 Aug 24 21:13 test.key<br>-rw------- 1 root root  883 Aug 24 21:13 test.ctr<br></code></pre></td></tr></table></figure><p>三、准备OpenVPN服务器配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#配置参数说明</span><br><span class="hljs-comment">#参考：/usr/share/doc/openvpn-2.4.12/sample/sample-config-files/server.conf</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># vim /etc/openvpn/server.conf</span><br>port 1194 <span class="hljs-comment">#openvpn监听端口</span><br>proto tcp <span class="hljs-comment">#使用的协议</span><br>dev tun <span class="hljs-comment">#启动openvpn后自动生成的网卡</span><br>ca /etc/openvpn/certs/ca.crt <span class="hljs-comment">#CA证书文件路径</span><br>cert /etc/openvpn/certs/server.crt <span class="hljs-comment">#服务器证书文件路径</span><br>key /etc/openvpn/certs/server.key <span class="hljs-comment">#私钥文件路径</span><br>dh /etc/openvpn/certs/dh.pem <span class="hljs-comment">#dh文件路径</span><br>server 10.8.0.0 255.255.255.0 <span class="hljs-comment">#给客户端使用的地址池，openvpn默认会保留地址池中的第一个地址</span><br>push <span class="hljs-string">&quot;route 172.30.0.0 255.255.255.0&quot;</span> <span class="hljs-comment">#路由记录，多条路由写多个push记录</span><br>keepalive 10 120 <span class="hljs-comment">#状态检测，每10秒检查连接状态，120秒没有连接则会断开</span><br>cipher AES-256-CBC <span class="hljs-comment">#加密算法</span><br>compress lz4-v2 <span class="hljs-comment">#压缩</span><br>push <span class="hljs-string">&quot;compress lz4-v2&quot;</span> <span class="hljs-comment">#推送客户端使用压缩算法</span><br>max-clients 2048 <span class="hljs-comment">#同时最多可支持多少用户连接openvpn</span><br>user openvpn <span class="hljs-comment">#账号用于启动openvpn，安装openvpn时会自动创建</span><br>group openvpn <span class="hljs-comment">#组用于启动openvpn，安装openvpn时会自动创建</span><br>status /var/log/openvpn/openvpn-status.log <span class="hljs-comment">#日志信息</span><br>log-append /var/log/openvpn/openvpn.log <span class="hljs-comment">#日志信息</span><br>verb 3 <span class="hljs-comment">#日志详细程度，0-9根据需求设置</span><br>mute 20 <span class="hljs-comment">#相同类别的信息只记录前20条到日志文件中</span><br><br><span class="hljs-comment">#准备日志相关目录</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># mkdir /var/log/openvpn</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># chown openvpn. /var/log/openvpn</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># ll -d /var/log/openvpn</span><br>drwxr-xr-x 2 openvpn openvpn 6 Aug 24 21:58 /var/log/openvpn<br></code></pre></td></tr></table></figure><h1 id="三、启动OpenVPN"><a href="#三、启动OpenVPN" class="headerlink" title="三、启动OpenVPN"></a>三、启动OpenVPN</h1><h2 id="1-启动openvpn服务"><a href="#1-启动openvpn服务" class="headerlink" title="1.启动openvpn服务"></a>1.启动openvpn服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看系统是否生成server文件，centos8及rocky8以上版本不会自动生成</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># rpm -ql openvpn | grep systemd</span><br>/usr/lib/systemd/system/openvpn-client@.service<br>/usr/lib/systemd/system/openvpn-server@.service<br>/usr/lib/systemd/system/openvpn@.service<br>/usr/share/doc/openvpn-2.4.12/README.systemd<br><br><span class="hljs-comment">#启动openvpn，并设置开启启动</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># systemctl daemon-reload</span><br>[root@VPN easy-rsa]<span class="hljs-comment"># systemctl enable --now openvpn@server</span><br><span class="hljs-comment">#查看服务状态</span><br>[root@VPN ~]<span class="hljs-comment"># systemctl status openvpn@server</span><br>● openvpn@server.service - OpenVPN Robust And Highly Flexible Tunneling Application On server<br>   Loaded: loaded (/usr/lib/systemd/system/openvpn@.service; enabled; vendor preset: disabled)<br>   Active: active (running) since Wed 2022-08-24 22:52:37 +08; 2min 22s ago<br> Main PID: 849 (openvpn)<br>   Status: <span class="hljs-string">&quot;Initialization Sequence Completed&quot;</span><br>   CGroup: /system.slice/system-openvpn.slice/openvpn@server.service<br>           └─849 /usr/sbin/openvpn --<span class="hljs-built_in">cd</span> /etc/openvpn/ --config server.con...<br><br>Aug 24 22:52:37 VPN systemd[1]: Starting OpenVPN Robust And Highly Flex.....<br>Aug 24 22:52:37 VPN systemd[1]: Started OpenVPN Robust And Highly Flexi...r.<br>Hint: Some lines were ellipsized, use -l to show <span class="hljs-keyword">in</span> full.<br><br>[root@VPN ~]<span class="hljs-comment"># ss -ntl</span><br>State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              <br>LISTEN     0      100    127.0.0.1:25                     *:*                  <br>LISTEN     0      32         *:1194                   *:*                  <br>LISTEN     0      128        *:22                     *:*                  <br>LISTEN     0      100    [::1]:25                  [::]:*                  <br>LISTEN     0      128     [::]:22                  [::]:*<br><br>[root@VPN ~]<span class="hljs-comment"># ip a</span><br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    <span class="hljs-built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: ens18: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether fe:<span class="hljs-built_in">fc</span>:fe:5d:fb:2b brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.1.199/24 brd 192.168.1.255 scope global noprefixroute ens18<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::4c92:458f:544c:7e06/64 scope <span class="hljs-built_in">link</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br>3: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100<br>    <span class="hljs-built_in">link</span>/none <br>    inet 10.127.0.1 peer 10.127.0.2/32 scope global tun0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::576b:e0a7:7693:69a9/64 scope <span class="hljs-built_in">link</span> flags 800 <br>       valid_lft forever preferred_lft forever<br><br></code></pre></td></tr></table></figure><h2 id="2-准备openvpn客户端配置文件"><a href="#2-准备openvpn客户端配置文件" class="headerlink" title="2.准备openvpn客户端配置文件"></a>2.准备openvpn客户端配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#生成客户端文件,文件后缀必须为.ovpn</span><br><span class="hljs-comment">#修改配置文件,内容如下</span><br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/openvpn/client/test/client.ovpn</span><br>client <span class="hljs-comment">#客户端</span><br>dev tun <span class="hljs-comment">#和服务器端保持一致</span><br>proto tcp <span class="hljs-comment">#和服务器端保持一致</span><br>remote 10.0.0.8 1194 <span class="hljs-comment">#生产中为OpenVPN公网IP或者FQDN</span><br>resolv-retry infinite <span class="hljs-comment">#地址解析，如果地址发生变化会自动进行解析</span><br>nobind<br>ca ca.crt <span class="hljs-comment">#CA文件</span><br>cert test.crt <span class="hljs-comment">#证书</span><br>key test.key<span class="hljs-comment">#私钥</span><br>remote-cert-tls server <span class="hljs-comment">#远程服务器证书</span><br>cipher AES-256-CBC <span class="hljs-comment">#加密算法</span><br>verb 3 <span class="hljs-comment">#此项需要和服务器端保持一致,否则无法通信</span><br>compress lz4-v2 <span class="hljs-comment">#此项需要和服务器端保持一致,如不指定,默认使用comp-lz压缩</span><br><br>[root@VPN ~]<span class="hljs-comment"># cd /etc/openvpn/client/test</span><br>[root@VPN <span class="hljs-built_in">test</span>]<span class="hljs-comment"># ll</span><br>total 16<br>-rw------- 1 root root 1176 Aug 24 21:13 ca.crt<br>-rw-r--r-- 1 root root  249 Aug 24 23:22 client.ovpn<br>-rw------- 1 root root 1834 Aug 24 21:13 test.key<br>-rw------- 1 root root  883 Aug 24 21:13 test.cte<br>[root@VPN <span class="hljs-built_in">test</span>]<span class="hljs-comment"># zip /root/test.zip *</span><br>  adding: ca.crt (deflated 26%)<br>  adding: client.ovpn (deflated 28%)<br>  adding: test.key (deflated 24%)<br>  adding: test.req (deflated 23%)<br><span class="hljs-comment">#可以通过xshell的文件传输或sz命令将刚刚打包的文件发送到Windows</span><br>[root@VPN <span class="hljs-built_in">test</span>]<span class="hljs-comment"># sz /root/test.zip  </span><br>  <br></code></pre></td></tr></table></figure><h1 id="四、实现-OpenVPN-客户端"><a href="#四、实现-OpenVPN-客户端" class="headerlink" title="四、实现 OpenVPN 客户端"></a>四、实现 OpenVPN 客户端</h1><h2 id="1-Windows-配置部署-OpenVPN-客户端"><a href="#1-Windows-配置部署-OpenVPN-客户端" class="headerlink" title="1.Windows 配置部署 OpenVPN 客户端"></a>1.Windows 配置部署 OpenVPN 客户端</h2><p>下载地址：<a href="https://openvpn.net/community-downloads/">Community Downloads | OpenVPN</a></p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220825164214339.png" alt="image-20220825164214339"></p><p>openvpn客户端安装过程：</p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220824234102001.png" alt="image-20220824234102001"></p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220824234244443.png" alt="image-20220824234244443"></p><p>安装完成后会提示没有读取配置文件，这是正常的</p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220824234301566.png" alt="image-20220824234301566"></p><h3 id="1-1Windows-客户端配置准备"><a href="#1-1Windows-客户端配置准备" class="headerlink" title="1.1Windows 客户端配置准备"></a>1.1Windows 客户端配置准备</h3><p>客户端默认安装路径：C:\Program Files\OpenVPN\config，将刚刚压缩的文件解压到该目录下</p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220824235752859.png" alt="image-20220824235752859"></p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220825000006331.png" alt="image-20220825000006331"></p><p>双击打开，然后在在状态栏显示以下图标,右键点连接</p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220825000039228.png" alt="image-20220825000039228"></p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220825000058164.png" alt="image-20220825000058164"></p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220825000128748.png" alt="image-20220825000128748"></p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220825000141848.png" alt="image-20220825000141848"></p><h3 id="1-2Windows-客户端验证通信"><a href="#1-2Windows-客户端验证通信" class="headerlink" title="1.2Windows 客户端验证通信"></a>1.2Windows 客户端验证通信</h3><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220825000321994.png" alt="image-20220825000321994"></p><p><img src="C:\Users\zhangk\blog\source_posts\centos7部署openvpn\image-20220825164747383.png"></p><h3 id="1-3验证OpenVPN服务器连接状态"><a href="#1-3验证OpenVPN服务器连接状态" class="headerlink" title="1.3验证OpenVPN服务器连接状态"></a>1.3验证OpenVPN服务器连接状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN <span class="hljs-built_in">test</span>]<span class="hljs-comment"># ss -nt</span><br>State      Recv-Q Send-Q                                 Local Address:Port                                                Peer Address:Port              <br>ESTAB      0      0                                      192.168.1.199:1194                                                10.1.100.240:10284              <br>ESTAB      0      36                                     192.168.1.199:22                                                   192.168.2.1:55585              <br>ESTAB      0      0                                      192.168.1.199:22                                                   192.168.2.1:55633<br></code></pre></td></tr></table></figure><h1 id="五、实现访问VPN服务器的内网主机"><a href="#五、实现访问VPN服务器的内网主机" class="headerlink" title="五、实现访问VPN服务器的内网主机"></a>五、实现访问VPN服务器的内网主机</h1><h2 id="5-1OpenVPN服务器打开-ip-forward功能"><a href="#5-1OpenVPN服务器打开-ip-forward功能" class="headerlink" title="5.1OpenVPN服务器打开 ip_forward功能"></a>5.1OpenVPN服务器打开 ip_forward功能</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#在服务器开启ip_forward转发功能</span><br>[root@centos8 ~]<span class="hljs-comment">#echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf</span><br>[root@centos8 ~]<span class="hljs-comment">#sysctl -p</span><br>net.ipv4.ip_forward = 1<br></code></pre></td></tr></table></figure><h2 id="5-2配置实现内网服务器回应外网的请求的路由"><a href="#5-2配置实现内网服务器回应外网的请求的路由" class="headerlink" title="5.2配置实现内网服务器回应外网的请求的路由"></a>5.2配置实现内网服务器回应外网的请求的路由</h2><h3 id="5-2-1在内网每个主机上添加路由"><a href="#5-2-1在内网每个主机上添加路由" class="headerlink" title="5.2.1在内网每个主机上添加路由"></a>5.2.1在内网每个主机上添加路由</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#这里不是在宿主机添加</span><br>[root@zabbix ~]<span class="hljs-comment"># route add -net 10.8.0.0/24 gw 192.168.1.199</span><br></code></pre></td></tr></table></figure><h3 id="5-2-2在OpenVPN服务器配置-iptables-规则"><a href="#5-2-2在OpenVPN服务器配置-iptables-规则" class="headerlink" title="5.2.2在OpenVPN服务器配置 iptables 规则"></a>5.2.2在OpenVPN服务器配置 iptables 规则</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN <span class="hljs-built_in">test</span>]<span class="hljs-comment"># iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to 192.168.1.199</span><br><br>[root@VPN <span class="hljs-built_in">test</span>]<span class="hljs-comment"># iptables -vnL -t nat</span><br>Chain PREROUTING (policy ACCEPT 1116 packets, 191K bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     <span class="hljs-built_in">source</span>               destination         <br><br>Chain INPUT (policy ACCEPT 964 packets, 172K bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     <span class="hljs-built_in">source</span>               destination         <br><br>Chain OUTPUT (policy ACCEPT 68 packets, 5168 bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     <span class="hljs-built_in">source</span>               destination         <br><br>Chain POSTROUTING (policy ACCEPT 68 packets, 5168 bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     <span class="hljs-built_in">source</span>               destination         <br>    4   240 SNAT       all  --  *      *       10.8.0.0/24       !10.8.0.0/24        to:192.168.1.199<br>[root@VPN <span class="hljs-built_in">test</span>]<span class="hljs-comment"># echo &#x27;iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to 192.168.1.199&#x27; &gt;&gt; /etc/rc.d/rc.local</span><br></code></pre></td></tr></table></figure><h1 id="VPN基本就搭建完成了！"><a href="#VPN基本就搭建完成了！" class="headerlink" title="VPN基本就搭建完成了！"></a>VPN基本就搭建完成了！</h1><h1 id="六、拓展资料，根据需求配置"><a href="#六、拓展资料，根据需求配置" class="headerlink" title="六、拓展资料，根据需求配置"></a>六、拓展资料，根据需求配置</h1><h2 id="1-如何给客户端指定配置，比如不同的客户端不同的ip地址、推送不同路由等"><a href="#1-如何给客户端指定配置，比如不同的客户端不同的ip地址、推送不同路由等" class="headerlink" title="1.如何给客户端指定配置，比如不同的客户端不同的ip地址、推送不同路由等"></a>1.如何给客户端指定配置，比如不同的客户端不同的ip地址、推送不同路由等</h2><p>先在server.conf中指定 client-config-dir目录，能够让openvpn访问的到</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#/etc/openvpn/路径下创建ccd目录</span><br>[root@VPN ~]<span class="hljs-comment"># mkdir /etc/openvpn/ccd</span><br><span class="hljs-comment">#配置openvpn，编辑/etc/openvpn/server.conf文件，添加如下：</span><br>client-config-dir /etc/openvpn/ccd        <span class="hljs-comment">#  确保/etc/openvpn/ccd存在</span><br><br>[root@VPN ~]<span class="hljs-comment"># cat /etc/openvpn/server.conf | grep &quot;client-config-dir /etc/openvpn/ccd&quot;</span><br>client-config-dir /etc/openvpn/ccd<br><br><br><br><span class="hljs-comment">#在/etc/openvpn/ccd目录下编辑一个与客户端同名的文件，比如想给vpnclient的这个客户端指定配置，那么就是/etc/openvpn/ccd/vpnclient，这些配置可以是</span><br>ifconfig-push 10.8.0.5 10.8.0.6       <span class="hljs-comment"># 指定客户端的IP地址，如果想固定客户端的ip可以这样做</span><br>push <span class="hljs-string">&quot;route 172.16.0.0 255.255.255.0&quot;</span>  <span class="hljs-comment"># 推送指定的路由，不同的客户端推送不同的路由可以这样做 </span><br>iroute 172.16.20.0 255.255.255.0       <span class="hljs-comment"># 忽略路由</span><br>push <span class="hljs-string">&quot;dhcp-option DNS 202.96.128.166&quot;</span>  <span class="hljs-comment"># 推送DNS</span><br>..........<br><br>特别注意：<br>ifconfig-push中的每一对IP地址表示虚拟客户端和服务器的IP端点。它们必须从连续的/30子网网段中获取(这里是/30表示xxx.xxx.xxx.xxx/30，即子网掩码位数为30)，以便于与Windows客户端和TAP-Windows驱动兼容。明确地说，每个端点的IP地址对的最后8位字节必须取自下面的集合。<br>以下是可用IP：<br>注意：tun0网卡默认会使用[1,2]地址<br>[  1,  2]   [  5,  6]   [  9, 10]   [ 13, 14]   [ 17, 18]<br>[ 21, 22]   [ 25, 26]   [ 29, 30]   [ 33, 34]   [ 37, 38]<br>[ 41, 42]   [ 45, 46]   [ 49, 50]   [ 53, 54]   [ 57, 58]<br>[ 61, 62]   [ 65, 66]   [ 69, 70]   [ 73, 74]   [ 77, 78]<br>[ 81, 82]   [ 85, 86]   [ 89, 90]   [ 93, 94]   [ 97, 98]<br>[101,102]   [105,106]   [109,110]   [113,114]   [117,118]<br>[121,122]   [125,126]   [129,130]   [133,134]   [137,138]<br>[141,142]   [145,146]   [149,150]   [153,154]   [157,158]<br>[161,162]   [165,166]   [169,170]   [173,174]   [177,178]<br>[181,182]   [185,186]   [189,190]   [193,194]   [197,198]<br>[201,202]   [205,206]   [209,210]   [213,214]   [217,218]<br>[221,222]   [225,226]   [229,230]   [233,234]   [237,238]<br>[241,242]   [245,246]   [249,250]   [253,254]<br></code></pre></td></tr></table></figure><h2 id="1-2通过脚本颁发证书"><a href="#1-2通过脚本颁发证书" class="headerlink" title="1.2通过脚本颁发证书"></a>1.2通过脚本颁发证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">~/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#</span></span><br>. /etc/init.d/functions<br><br>OPENVPN_SERVER=&quot;openvpn.sdg.com.cn&quot;<br>PASS=123456<br>read -p &quot;请输入用户的姓名拼音(如:user1): &quot; NAME<br><br>remove_cert () &#123;<br>rm -rf /etc/openvpn/client/$&#123;NAME&#125;<br>find /etc/openvpn/ -name &quot;$NAME.*&quot; -delete<br>&#125;<br>create_cert () &#123;<br>cd /data/easy-rsa<br>./easyrsa gen-req $&#123;NAME&#125; nopass &lt;&lt;EOF<br>EOF<br>cd /data/easy-rsa<br>./easyrsa import-req /data/easy-rsa/pki/reqs/$&#123;NAME&#125;.req <br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;NAME&#125;</span><br><br>./easyrsa sign client $&#123;NAME&#125; &lt;&lt;EOF<br>yes<br>Admin@sdg2022<br>EOF<br>mkdir /etc/openvpn/client/$&#123;NAME&#125;<br>cp /data/easy-rsa/pki/issued/$&#123;NAME&#125;.crt /etc/openvpn/client/$&#123;NAME&#125;<br>cp /data/easy-rsa/pki/private/$&#123;NAME&#125;.key /etc/openvpn/client/$&#123;NAME&#125;<br>cp /etc/openvpn/certs/&#123;ca.crt&#125; /etc/openvpn/client/$&#123;NAME&#125;<br>cat &gt; /etc/openvpn/client/$&#123;NAME&#125;/client.ovpn &lt;&lt;EOF<br>client<br>dev tun<br>proto tcp<br>remote $&#123;OPENVPN_SERVER&#125; 11094<br>resolv-retry infinite<br>nobind<br>ca ca.crt<br>cert $NAME.crt<br>key $NAME.key<br>remote-cert-tls server<br>cipher AES-256-CBC<br>verb 3<br>compress lz4-v2<br>auth-user-pass<br>EOF<br>echo &quot;证书存放路径:/etc/openvpn/client/$&#123;NAME&#125;,证书文件如下:&quot;<br>echo -e &quot;\E[1;32m******************************************************************\E[0m&quot;<br><br>ls -l /etc/openvpn/client/$&#123;NAME&#125;<br><br>echo -e &quot;\E[1;32m******************************************************************\E[0m&quot;<br><br>cd /etc/openvpn/client/$&#123;NAME&#125;<br>zip /root/$&#123;NAME&#125;.zip *<br>action &quot;证书的打包文件已生成: /root/$&#123;NAME&#125;.zip&quot;<br>&#125;<br><br><br>remove_cert<br>create_cert<br></code></pre></td></tr></table></figure><h2 id="1-3实现用户密码认证"><a href="#1-3实现用户密码认证" class="headerlink" title="1.3实现用户密码认证"></a>1.3实现用户密码认证</h2><h3 id="1-3-1修改服务端配置"><a href="#1-3-1修改服务端配置" class="headerlink" title="1.3.1修改服务端配置"></a>1.3.1修改服务端配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN ~]<span class="hljs-comment"># vim /etc/openvpn/server.conf</span><br><span class="hljs-comment"># 添加三行，实现服务端支持密码认证方式</span><br>script-security 3 <span class="hljs-comment"># 允许使用自定义脚本</span><br>auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env <span class="hljs-comment">#指定自定义脚本路径</span><br>username-as-common-name <span class="hljs-comment">#开启用户密码验证</span><br></code></pre></td></tr></table></figure><h3 id="1-3-2创建自定义脚本"><a href="#1-3-2创建自定义脚本" class="headerlink" title="1.3.2创建自定义脚本"></a>1.3.2创建自定义脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN ~]<span class="hljs-comment"># vim /etc/openvpn/checkpsw.sh</span><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment">###########################################################</span><br><span class="hljs-comment"># checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This script will authenticate OpenVPN users against</span><br><span class="hljs-comment"># a plain text file. The passfile should simply contain</span><br><span class="hljs-comment"># one row per user with the username first followed by</span><br><span class="hljs-comment"># one or more space(s) or tab(s) and then the password.</span><br><span class="hljs-comment">###########################################################</span><br>PASSFILE=<span class="hljs-string">&quot;/etc/openvpn/psw-file&quot;</span><br>LOG_FILE=<span class="hljs-string">&quot;/var/log/openvpn-password.log&quot;</span><br>TIME_STAMP=`<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %T&quot;</span>`<br><span class="hljs-keyword">if</span> [ ! -r <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PASSFILE&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TIME_STAMP&#125;</span>: Could not open password file \&quot;<span class="hljs-variable">$&#123;PASSFILE&#125;</span>\&quot; for</span><br><span class="hljs-string">reading.&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOG_FILE&#125;</span><br><span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br>CORRECT_PASSWORD=`awk <span class="hljs-string">&#x27;!/^;/&amp;&amp;!/^#/&amp;&amp;$1==&quot;&#x27;</span><span class="hljs-variable">$&#123;username&#125;</span><span class="hljs-string">&#x27;&quot;&#123;print $2;exit&#125;&#x27;</span><br><span class="hljs-variable">$&#123;PASSFILE&#125;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CORRECT_PASSWORD&#125;</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TIME_STAMP&#125;</span>: User does not exist: username=\&quot;<span class="hljs-variable">$&#123;username&#125;</span>\&quot;,</span><br><span class="hljs-string">password=\&quot;<span class="hljs-variable">$&#123;password&#125;</span>\&quot;.&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOG_FILE&#125;</span><br><span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;password&#125;</span>&quot;</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CORRECT_PASSWORD&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TIME_STAMP&#125;</span>: Successful authentication: username=\&quot;<span class="hljs-variable">$&#123;username&#125;</span>\&quot;.&quot;</span><br>&gt;&gt; <span class="hljs-variable">$&#123;LOG_FILE&#125;</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TIME_STAMP&#125;</span>: Incorrect password: username=\&quot;<span class="hljs-variable">$&#123;username&#125;</span>\&quot;,</span><br><span class="hljs-string">password=\&quot;<span class="hljs-variable">$&#123;password&#125;</span>\&quot;.&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOG_FILE&#125;</span><br><span class="hljs-built_in">exit</span> 1<br><br><span class="hljs-comment">#增加执行权限</span><br>[root@centos8 ~]<span class="hljs-comment"># chmod +x /etc/openvpn/checkpsw.sh</span><br></code></pre></td></tr></table></figure><h3 id="1-3-3创建用户密码文件"><a href="#1-3-3创建用户密码文件" class="headerlink" title="1.3.3创建用户密码文件"></a>1.3.3创建用户密码文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN openvpn]<span class="hljs-comment"># pwd</span><br>/etc/openvpn<br><br><span class="hljs-comment">#创建创建存储用户密码文件</span><br>[root@VPN openvpn]<span class="hljs-comment"># vim /etc/openvpn/psw-file</span><br><span class="hljs-built_in">test</span> 123456<br>test1 123123<br><br><span class="hljs-comment"># 创建用户和密码认证文件,每行是一个用户和密码</span><br>[root@VPN openvpn]<span class="hljs-comment"># cat psw-file </span><br><span class="hljs-built_in">test</span> 123456<br>test1 123123<br><br>[root@centos8 ~]<span class="hljs-comment"># systemctl restart openvpn@server</span><br></code></pre></td></tr></table></figure><h3 id="1-3-4修改客户端配置"><a href="#1-3-4修改客户端配置" class="headerlink" title="1.3.4修改客户端配置"></a>1.3.4修改客户端配置</h3><p>修改客户端配置文件client.ovpn文件，增加下面一行,使其支持用户名/密码与服务器进行身份验证.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VPN openvpn]<span class="hljs-comment"># vim /etc/openvpn/client/wangxiaochun/client.ovpn</span><br><span class="hljs-comment">#加下面一行,可以支持用户密码认证</span><br>auth-user-pass<br></code></pre></td></tr></table></figure><p><img src="image-20220830231855729-16618737586081.png" alt="image-20220830231855729"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二周的作业</title>
    <link href="/2022/08/14/%E4%BA%8C%E5%91%A8%E7%9A%84%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/08/14/%E4%BA%8C%E5%91%A8%E7%9A%84%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="二周的作业"><a href="#二周的作业" class="headerlink" title="二周的作业"></a>二周的作业</h1><span id="more"></span><p>完成一个shell脚本，脚本的作用。</p><h2 id="1-运行脚本可以显示出本机的ip地址"><a href="#1-运行脚本可以显示出本机的ip地址" class="headerlink" title="1.运行脚本可以显示出本机的ip地址"></a>1.运行脚本可以显示出本机的ip地址</h2><p><img src="image-20220814210930981.png" alt="image-20220814210930981"></p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">ip a | grep -Eo &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;|tail -n 2|head -n 1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过grep在ip a中提取本机的IP地址</span><br></code></pre></td></tr></table></figure><h2 id="2-如果ip地址中有3这个数字，那么就打印出当前的系统时间"><a href="#2-如果ip地址中有3这个数字，那么就打印出当前的系统时间" class="headerlink" title="2.如果ip地址中有3这个数字，那么就打印出当前的系统时间"></a>2.如果ip地址中有3这个数字，那么就打印出当前的系统时间</h2><p><img src="image-20220814214242388.png" alt="image-20220814214242388"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$IP</span> =~ [3*] ]] ; <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;包含3&quot;</span>;<span class="hljs-keyword">else</span> <span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span>`;<span class="hljs-keyword">fi</span><br><span class="hljs-comment">#如果IP地址中包含则打印“包含3”，反之则打印时间</span><br>Sun Aug 14 21:39:54 CST 2022<br></code></pre></td></tr></table></figure><h2 id="3-如果ip地址中不含3这个数字，就批量建立用户magedu-00-magedu-01-…magedu-100并且所有用户同属于magedu组"><a href="#3-如果ip地址中不含3这个数字，就批量建立用户magedu-00-magedu-01-…magedu-100并且所有用户同属于magedu组" class="headerlink" title="3.如果ip地址中不含3这个数字，就批量建立用户magedu_00, magedu_01, …magedu_100并且所有用户同属于magedu组"></a>3.如果ip地址中不含3这个数字，就批量建立用户magedu_00, magedu_01, …magedu_100并且所有用户同属于magedu组</h2><p><img src="image-20220814222249917.png" alt="image-20220814222249917"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> `groupadd magedu`;<span class="hljs-built_in">echo</span> magedu_&#123;00..100&#125;|xargs -n1 useradd -g magedu<br><span class="hljs-comment">#先创建magedu用户组，之后通过echo批量输出用户再通过xargs进行换行从而时间useradd批量创建用户-g指定目录</span><br></code></pre></td></tr></table></figure><h2 id="4-打印出-etc-passwd这个文件中可以登陆的用户（非-usr-sbin-nologin）"><a href="#4-打印出-etc-passwd这个文件中可以登陆的用户（非-usr-sbin-nologin）" class="headerlink" title="4.打印出/etc/passwd这个文件中可以登陆的用户（非/usr/sbin/nologin）"></a>4.打印出/etc/passwd这个文件中可以登陆的用户（非/usr/sbin/nologin）</h2><p><img src="image-20220814222757426.png" alt="image-20220814222757426"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/passwd | grep  <span class="hljs-string">&quot;/bash&quot;</span>|<span class="hljs-built_in">cut</span> -d: -f1<br><span class="hljs-comment">#查看passwd通过grep找出行尾是/bash的用户，在通过cut抽取第一列</span><br></code></pre></td></tr></table></figure><h2 id="5-yum安装nginx服务，并且启动该服务"><a href="#5-yum安装nginx服务，并且启动该服务" class="headerlink" title="5.yum安装nginx服务，并且启动该服务"></a>5.yum安装nginx服务，并且启动该服务</h2><p><img src="image-20220814231645303.png" alt="image-20220814231645303"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install nginx<br><span class="hljs-comment">#安装nginx</span><br>systemctl start nginx.service<br><span class="hljs-comment">#启动nginx</span><br></code></pre></td></tr></table></figure><h2 id="6-一个脚本完成"><a href="#6-一个脚本完成" class="headerlink" title="6.一个脚本完成"></a>6.一个脚本完成</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#-------------------------------------------------------------</span><br><span class="hljs-comment">#Author:zhangk714</span><br><span class="hljs-comment">#QQ:2970212825</span><br><span class="hljs-comment">#Date:2022-08-14</span><br><span class="hljs-comment">#FileName:cd.sh</span><br><span class="hljs-comment">#URL:https://zhangk714.github.io</span><br><span class="hljs-comment">#Description:The test script</span><br><span class="hljs-comment">#Copyright(C):2022 all rights reserved</span><br><span class="hljs-comment">#------------------------------------------------------------</span><br>. /etc/init.d/functions<br><span class="hljs-comment">#变量声明</span><br>IP=`ip a | grep -Eo <span class="hljs-string">&quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span>|<span class="hljs-built_in">tail</span> -n 2|<span class="hljs-built_in">head</span> -n 1`<br>TIME=`<span class="hljs-built_in">date</span> +%F_%T`<br><span class="hljs-built_in">echo</span> -en <span class="hljs-string">&quot;\E[$[RANDOM%7+31];1m&quot;</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">请选择：</span><br><span class="hljs-string">1）显示本机IP地址</span><br><span class="hljs-string">2）如果IP地址没有3,则批量创建</span><br><span class="hljs-string">3）显示可登陆用户</span><br><span class="hljs-string">4）安装nginx</span><br><span class="hljs-string">5）退出</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">echo</span> -en <span class="hljs-string">&#x27;\E[0m&#x27;</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请选择上面项对应的数字1-5: &quot;</span> MENU<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$MENU</span> -eq 1 ] ; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> 本机IP地址:<span class="hljs-variable">$IP</span><br><span class="hljs-keyword">elif</span> [[ <span class="hljs-variable">$IP</span> =~ [3*] ]] ;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> 当前时间:<span class="hljs-variable">$TIME</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$MENU</span> -eq 2] ; <span class="hljs-keyword">then</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;批量创建中，请耐心等待！&quot;</span><br><span class="hljs-built_in">echo</span> `groupadd magedu`;<span class="hljs-built_in">echo</span> magedu_&#123;00..100&#125;|xargs -n1 useradd -g magedu<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已批量创建完毕！&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$MENU</span> -eq 3 ] ; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> /etc/passwd | grep  <span class="hljs-string">&quot;/bash&quot;</span>|<span class="hljs-built_in">cut</span> -d: -f1`<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$MENU</span> -eq 4 ] ; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nginx开始安装&quot;</span><br>yum -y install nginx<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nginx已安装完毕！&quot;</span><br>systemctl start nginx.service<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nginx已启动！&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$MENU</span> -eq 5 ] ; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一周的作业</title>
    <link href="/2022/08/01/%E4%B8%80%E5%91%A8%E7%9A%84%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/08/01/%E4%B8%80%E5%91%A8%E7%9A%84%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>[TOC]</p><h1 id="一、-开源协议GPL、BSD、MIT、Mozilla、Apache、LGPL们的区别"><a href="#一、-开源协议GPL、BSD、MIT、Mozilla、Apache、LGPL们的区别" class="headerlink" title="一、 开源协议GPL、BSD、MIT、Mozilla、Apache、LGPL们的区别"></a>一、 开源协议GPL、BSD、MIT、Mozilla、Apache、LGPL们的区别</h1><h3 id="1-开源协议的选择逻辑图"><a href="#1-开源协议的选择逻辑图" class="headerlink" title="1.开源协议的选择逻辑图"></a>1.开源协议的选择逻辑图</h3><p>通过下图直观清晰的来划分各种协议：开源许可证GPL、BSD、MIT、Mozilla、Apache和LGPL的区别：</p><p><img src="wps55.jpg" alt="img"></p><h3 id="2-开源协议描述"><a href="#2-开源协议描述" class="headerlink" title="2.开源协议描述"></a>2.开源协议描述</h3><h4 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h4><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p><h4 id="MPL"><a href="#MPL" class="headerlink" title="MPL"></a>MPL</h4><p>MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对源代码的需求和他们利用源代码获得的利益。同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同（因为都是符合OSIA 认定的开源软件许可证）。但是，相比而言MPL还有以下几个显著的不同之处:</p><ol><li><p>MPL虽然要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在MPL 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL 许可证的形式对外许可外，源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个豁口。</p></li><li><p>MPL许可证第三条第7款中允许被许可人将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。</p></li><li><p>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。</p></li><li><p>对源代码的定义：而在MPL（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘Script’），或者不是与初始源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。”</p></li><li><p>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</p></li></ol><h4 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h4><p>GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/自由使用和引用/修改/衍生代码的开源/自由软件，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的自由软件了。</p><p>GPL协议的主要内容是只要在一个软件中使用(”使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p><p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p><p>BSD</p><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p><p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><ol><li><p>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</p></li><li><p>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</p></li><li><p>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</p></li></ol><p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h4 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h4><p>MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的</p><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p><ol><li><p>需要给代码的用户一份Apache Licence</p></li><li><p>如果你修改了代码，需要再被修改的文件中说明。</p></li><li><p>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</p></li><li><p>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</p></li></ol><p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><h1 id="二、Linux常见系统安装"><a href="#二、Linux常见系统安装" class="headerlink" title="二、Linux常见系统安装"></a>二、Linux常见系统安装</h1><h2 id="1-Ubuntu22-04"><a href="#1-Ubuntu22-04" class="headerlink" title="1.Ubuntu22.04"></a>1.Ubuntu22.04</h2><p>1.虚拟机创建</p><p><img src="wps57.jpg" alt="img"> </p><p>2.这一步选择“稍后安装操作系统”</p><p><img src="wps58.jpg" alt="img"> </p><p>3.选择“客户机操作系统”和“版本”然后下一步</p><p><img src="wps59.jpg" alt="img"> </p><p>4.“虚拟机名称”和“位置”可以默认，也可以按需求修改</p><p><img src="wps60.jpg" alt="img"> </p><p>5.这里建议大家按自己需求来选择，如果不知道怎么选择可以参照文档操作；</p><p>对单文件和多文件做一下补充（了解一下）：</p><p>单文件：在磁盘内容相对稳定时，访问速度相比多文件会快一点，但是如果虚拟磁盘增长很快，或容量变化很大，可能会产生大量碎片，性能将会明显下降。但有一个缺点如果单文件受损，就相当于整个磁盘丢失，代价较大。</p><p>多文件：多文件可以减轻压力，单文件容易造成系统负载大。单文件占用的是磁盘上的某一连续区域，读取速度快占用内存大。多文件分散在各个扇区读取速度一般但是占用内存小。</p><p><img src="wps61.jpg" alt="img"> </p><p>6.选择“自定义硬件”</p><p>这里我的配置为2G内存和2核处理器，由于是测试机所以配置不高，需要高配置可以在“自定义硬件”中针对“设备”做调整。</p><p><img src="wps62.jpg" alt="img"> </p><p><img src="wps63.jpg" alt="img"> </p><p><img src="wps64.jpg" alt="img"> </p><p>7.“编辑虚拟机”</p><p><img src="wps65.jpg" alt="img"> </p><p><img src="wps66.jpg" alt="img"> </p><p><img src="wps67.jpg" alt="img"> </p><p><img src="wps68.jpg" alt="img"> </p><p><img src="wps69.jpg" alt="img"> </p><p>默认选择English，下一步</p><p><img src="wps70.jpg" alt="img"> </p><p>默认选择不更新，下一步</p><p><img src="wps71.jpg" alt="img"> </p><p>语言默认使用英语，下一步</p><p><img src="wps72.jpg" alt="img"> </p><p>默认第一个选项，下一步</p><p><img src="wps73.jpg" alt="img"> </p><p>IP地址默认使用DHCP分配，下一步</p><p><img src="wps74.jpg" alt="img"> </p><p>代理可以不用设置，下一步</p><p><img src="wps75.jpg" alt="img"> </p><p>镜像地址国内最好还是改为阿里云或者清华大学</p><p>通过Tab键切换选项</p><p>阿里云：<a href="https://mirrors.aliyun.com/ubuntu/">https://mirrors.aliyun.com/ubuntu/</a></p><p>清华大学：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a></p><p><img src="wps76.jpg" alt="img"> </p><p>默认，下一步</p><p><img src="wps77.jpg" alt="img"> </p><p>分区默认，下一步</p><p><img src="wps78.jpg" alt="img"> </p><p>这是会问是否选择继续，选择继续</p><p><img src="wps79.jpg" alt="img"> </p><p>填写账号相关信息，下一步</p><p><img src="wps80.jpg" alt="img"> </p><p>注意：一定要用”空格键“将Install OpenSS server选中后再下一步</p><p><img src="wps81.jpg" alt="img"> </p><p>无需修改，下一步</p><p><img src="wps82.jpg" alt="img"> </p><p>最后就是等待安装完毕</p><p><img src="wps83.jpg" alt="img"> </p><p>选中Reboot，然后等待重启</p><p><img src="wps84.jpg" alt="img"> </p><p>这里提示移除安装介质可以不用管，直接按下确定键即可</p><p><img src="wps85.jpg" alt="img"> </p><p>这里输入刚刚设置的账号密码即可登录系统，到这一步系统就安装完成了。</p><p><img src="wps86.jpg" alt="img"> </p><h2 id="2-Centos7-9"><a href="#2-Centos7-9" class="headerlink" title="2.Centos7.9"></a>2.Centos7.9</h2><p>1.由于创建虚拟机和上面是一样的，所以就不重复，直接进入安装界面</p><p>2.选择第一项进行安装配置</p><p><img src="wps87.jpg" alt="img"> </p><p><img src="wps88.jpg" alt="img"> </p><p>3.现在来到语言选择界面，在该界面所选择的语言将成为默认的系统语言，这里我就直接默认下一步</p><p><img src="wps89.jpg" alt="img"> </p><p>4.系统安装前需要做一些设置，由于我之前选的语言是英语，所以这里我需要修改一下“时间和时区”</p><p><img src="wps90.jpg" alt="img"> </p><p>5.将时区选择为上海，如果这一步没有设置，可进入系统通过命令实现</p><p><img src="wps91.jpg" alt="img"> </p><p>6.时区修改完毕后点Done，下面开始设置分区，这里特别需要注意的“SWAP”交换分区最好容量分配不要超过2G！其余分区可按计算机配置自行分配大小</p><p><img src="wps92.jpg" alt="img"> </p><p><img src="wps93.jpg" alt="img"> </p><p>7.完成分区后，选择软件的安装，由于我需要的是最小化安装，这里我就不修改了。如果需要图形界面可以选择server with GUI</p><p><img src="wps94.jpg" alt="img"> </p><p>8.接下来设置网卡，根据图片内提示进行网卡的设置</p><p><img src="wps95.jpg" alt="img"> </p><p>9.主机名称我这里选择了默认，如果有什么需要可以自行修改</p><p><img src="wps96.jpg" alt="img"> </p><p>10.这是本次安装所有操作过的选择，之后就是安装</p><p><img src="wps97.jpg" alt="img"> </p><p>11.设置root密码和用户，root密码尽量复杂一点，普通用户可以简单一些，设置完毕后就等待安装结束然后重启</p><p><img src="wps98.jpg" alt="img"> </p><p><img src="wps99.jpg" alt="img"> </p><p><img src="wps100.jpg" alt="img"> </p><p>12.重启后，输入刚刚root账户密码就可以登录系统了</p><p><img src="wps101.jpg" alt="img"> </p><h1 id="三、Linux中总结"><a href="#三、Linux中总结" class="headerlink" title="三、Linux中总结"></a>三、Linux中总结</h1><h3 id="1-如何通过一个简短的关键字，例如process-获取相关的命令。"><a href="#1-如何通过一个简短的关键字，例如process-获取相关的命令。" class="headerlink" title="1. 如何通过一个简短的关键字，例如process 获取相关的命令。"></a>1. 如何通过一个简短的关键字，例如process 获取相关的命令。</h3><p>1.1TAB补全查找</p><p><img src="wps102.jpg" alt="img"> </p><p>1.2通过man命令进行查询</p><p><img src="wps103.jpg" alt="img"> </p><p>1.3通过谷歌、百度等途径搜索</p><h3 id="2-通过命令的描述，选择一个命令，获取命令的man文档"><a href="#2-通过命令的描述，选择一个命令，获取命令的man文档" class="headerlink" title="2. 通过命令的描述，选择一个命令，获取命令的man文档"></a>2. 通过命令的描述，选择一个命令，获取命令的man文档</h3><p><img src="wps104.jpg" alt="img"> </p><h3 id="3-解读man文档，man分几个部分？"><a href="#3-解读man文档，man分几个部分？" class="headerlink" title="3. 解读man文档，man分几个部分？"></a>3. 解读man文档，man分几个部分？</h3><p><img src="wps105.jpg" alt="img"> </p><p>man页面包含杂项.</p><p>1 通用命令</p><p>2 系统调用</p><p>3 库调用</p><p>4 设备文件</p><p>5 配置文件</p><p>6 游戏</p><p>7 杂项</p><p>8 系统管理命令</p><p>9 内核相关的</p><p>Name: 描述命令名，Synopsis:  概要，Configuration: 配置详情，Description: 描述，Options:  命令行选项，Exit Status: 退出状态，Return Value: 返回值Errors:  错误相关，Environment: 环境变量，Files:  程序会使用哪些配置文件，Attributes:  命令的相关属性，Versions:  程序某些库显著改变相关的版本，Notes: 一些备注，Bugs: 已知bug，提交bug，Examples: 命令使用示例，Authors:  编写，维护命令的作者们，See also: 命令相关的命令，</p><h4 id="3-1man每个部分的解释，特别是语法部分。"><a href="#3-1man每个部分的解释，特别是语法部分。" class="headerlink" title="3.1man每个部分的解释，特别是语法部分。"></a>3.1man每个部分的解释，特别是语法部分。</h4><p><img src="wps106.jpg" alt="img"> </p><p>如man -C 文件</p><h4 id="3-2-lt-gt-…等各代表什么含义"><a href="#3-2-lt-gt-…等各代表什么含义" class="headerlink" title="3.2&lt;&gt;, [] …等各代表什么含义"></a>3.2&lt;&gt;, [] …等各代表什么含义</h4><p>[] 可以省略，[[] &lt;&gt;]  使用括号中的内容时，选项可以省略，值不能省略。如果有多个此类形式，就需要参数。如果此形式在命令紧随其后，我们可以省略选项</p><p>一般运行一个命令，可以忽略所有[]中的内容</p><h3 id="4-根据语法部分-简要的写几个操作"><a href="#4-根据语法部分-简要的写几个操作" class="headerlink" title="4.根据语法部分 简要的写几个操作"></a>4.根据语法部分 简要的写几个操作</h3><p><img src="wps107.jpg" alt="img"> </p><h1 id="四、-etc-fstab文件的详细解述"><a href="#四、-etc-fstab文件的详细解述" class="headerlink" title="四、/etc/fstab文件的详细解述"></a>四、/etc/fstab文件的详细解述</h1><p>切换到/etc/目录列出，fstab文件的详细信息，详细解述fstab一行，每个或每几个字符的详细含义。</p><p><img src="wps108.jpg" alt="img"> </p><p>#号开头行是注释</p><p>/dev/mapper/rl-root   /            xfs          defaults          0 0</p><p>目录               挂载位置      文件系统     默认挂载选项      不备份不自检</p><h1 id="五、简要说明FHS结构"><a href="#五、简要说明FHS结构" class="headerlink" title="五、简要说明FHS结构"></a>五、简要说明FHS结构</h1><p>/目录是Linux的总目录</p><p>/bin二进制程序，普通用户使用的工具</p><p>/sbin二进制程序，给管理员使用的工具</p><p>/boot存放有关于启动的文件及内核文件</p><p>Linux是指的内核</p><p>/dev存放各类硬件</p><p>/etc放置各种配置文件（核心</p><p>/home用户\家目录</p><p>/root系统管理员目录</p><p>/run临时存放程序文件</p><p>/tmp临时文件</p><p>/var变化数据</p><p>/var/log日志文件目录</p><p>/usr系统文件目录</p><p>/lib及lib64存放程序的库</p><p>/mnt及mdeit用于挂在外置设备使用</p><p>/proc及sys假目录，存放内存目录</p><p>/opt及srv用于安装第三方软件的目录</p><h1 id="六、相关命令理解总结"><a href="#六、相关命令理解总结" class="headerlink" title="六、相关命令理解总结"></a>六、相关命令理解总结</h1><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><p>#mv 移动文件或目录</p><p>#rm 删除文件或目录</p><p>#cp 复制</p><p>#touch 创建文件</p><p>#mkdir 创建目录</p><p>#cat 查看文件</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>#useradd 创建</p><p>#usermod 修改</p><p>#userdel 删除</p><h3 id="组用户"><a href="#组用户" class="headerlink" title="组用户"></a>组用户</h3><p>#groupadd 创建</p><p>#groupmod 修改</p><p>#groupdel  删除</p><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>#chown 文件用户修改</p><p>#chgrp 文件属组修改</p><p>#chmod 文件权限修改</p><p>#chattr 添加文件特殊属性</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>免费搞网站-gitpages</title>
    <link href="/2022/05/12/%E5%85%8D%E8%B4%B9%E6%90%9E%E7%BD%91%E7%AB%99-gitpages/"/>
    <url>/2022/05/12/%E5%85%8D%E8%B4%B9%E6%90%9E%E7%BD%91%E7%AB%99-gitpages/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>完全免费的git网站搭建, 参考 <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><p>实现的目标: 本地写markdown, 推送github即可以看 github.io 域名查看网页。</p><p>实现的工具</p><ul><li><code>nodejs</code>           hexo生成网站</li><li><code>codeup.aliyun.com</code>    保存自己的博客代码</li><li><code>github.com</code>   静态页面展示 </li><li><code>vscode</code>   开发工具</li></ul><span id="more"></span><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><p>参考  <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a> 确保访问OK</p><p>slcnx.github.io 仓库名</p><p>准备index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  hello world<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="20220512214701-16524035403072.png" alt="image-20220512214700115"></p><p><img src="20220512214623.png" alt="image-20220512214617755"></p><h1 id="docker推送github"><a href="#docker推送github" class="headerlink" title="docker推送github"></a>docker推送github</h1><p>新建临时目录，vscode打开, 准备以下文件</p><p>id_rsa_2048 <strong>需要linux生成或xshell生成，不可以自己生成</strong></p><p>id_rsa_2048的公钥加入到以上仓库中</p><p><img src="20220512225649.png" alt="image-20220512225647448"></p><p>Dockerfile</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> node:latest<br><br><br>WORKDIR /data/git <br><br><span class="hljs-built_in">ADD</span> id_rsa_2048 /root/.ssh/<br><span class="hljs-built_in">RUN</span>  chmod 600 /root/.ssh/id_rsa_2048 <br><br><span class="hljs-built_in">ADD</span> . ./<br><br><span class="hljs-comment"># 生成网页</span><br><span class="hljs-comment">#RUN npm run build </span><br><br><br><span class="hljs-comment"># 上传到GIT</span><br><br><span class="hljs-built_in">RUN</span> install -dv /data/page/ &amp;&amp; cp -a index.html /data/page/<br><br><br>WORKDIR /data/page/<br>ENV <span class="hljs-attribute">GIT_SSH_COMMAND</span>=<span class="hljs-string">&#x27;ssh -i /root/.ssh/id_rsa_2048  -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&#x27;</span><br><span class="hljs-built_in">RUN</span> git<span class="hljs-built_in"> config </span>--global init.defaultBranch main &amp;&amp; git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> &amp;&amp; git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&#x27;songliangcheng&#x27;</span>  &amp;&amp; \<br>    git<span class="hljs-built_in"> config </span>--global pull.rebase <span class="hljs-literal">true</span> &amp;&amp; \<br>    git init &amp;&amp; \<br>    git remote <span class="hljs-built_in">add</span> origin git@github.com:slcnx/slcnx.github.io.git &amp;&amp; git <span class="hljs-built_in">add</span> -A &amp;&amp; git commit -m init &amp;&amp; git push --force origin main <br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    cat<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\vscode_projects\myblog&gt;docker build -t <span class="hljs-built_in">test</span> .<br></code></pre></td></tr></table></figure><p><img src="20220512223352.png" alt="image-20220512223351323"></p><h1 id="本地生成hexo仓库"><a href="#本地生成hexo仓库" class="headerlink" title="本地生成hexo仓库"></a>本地生成hexo仓库</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br><br><span class="hljs-comment"># 当前目录为项目根</span><br>hexo init test1blog<br><span class="hljs-built_in">cd</span> test1blog<br><br><span class="hljs-comment"># 内容</span><br>$ <span class="hljs-built_in">ls</span><br>_config.landscape.yml  node_modules/  package-lock.json  <span class="hljs-built_in">source</span>/<br>_config.yml            package.json   scaffolds/         themes/<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><img src="20220512224452.png" alt="image-20220512224451207"></p><h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><p>在以上目录 <code>test1blog</code> 中生成以下文件</p><ol><li><p><code>.dockerignore</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">node_modules/<br></code></pre></td></tr></table></figure></li><li><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:latest<br><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data/git </span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> id_rsa_2048 /root/.ssh/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash">  <span class="hljs-built_in">chmod</span> 600 /root/.ssh/id_rsa_2048 </span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . ./</span><br><br><span class="hljs-comment"># 生成网页</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build </span><br><br><span class="hljs-comment"># 上传到GIT</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> install -dv /data/page/ &amp;&amp; <span class="hljs-built_in">cp</span> -a public /data/page/</span><br><br><span class="hljs-keyword">ARG</span> GITHUB<br><span class="hljs-keyword">ARG</span> GUSER <br><span class="hljs-keyword">ARG</span> EMAIL <br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data/page/public/</span><br><span class="hljs-keyword">ENV</span> GIT_SSH_COMMAND=<span class="hljs-string">&#x27;ssh -i /root/.ssh/id_rsa_2048  -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&#x27;</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git config --global init.defaultBranch main &amp;&amp; git config --global user.email <span class="hljs-variable">$EMAIL</span>  &amp;&amp; git config --global user.name <span class="hljs-variable">$GUSER</span>  &amp;&amp; \</span><br><span class="language-bash">    git config --global pull.rebase <span class="hljs-literal">true</span> &amp;&amp; \</span><br><span class="language-bash">    git init &amp;&amp; \</span><br><span class="language-bash">    git remote add origin <span class="hljs-variable">$GITHUB</span> &amp;&amp; git add -A &amp;&amp; git commit -m init &amp;&amp; git push --force origin main </span><br></code></pre></td></tr></table></figure></li><li><p><code>id_rsa_2048</code> 以上与github互通的密钥</p></li><li><p>发布</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker build <span class="hljs-attr">--build-arg</span> GITHUB=git@github<span class="hljs-selector-class">.com</span>:slcnx/slcnx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span> <span class="hljs-attr">--build-arg</span> EMAIL=<span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> <span class="hljs-attr">--build-arg</span> GUSER=<span class="hljs-string">&#x27;songliangcheng&#x27;</span> ./<br></code></pre></td></tr></table></figure></li></ol><p><img src="20220512225143.png" alt="image-20220512225141348"></p><h1 id="codeup一键发布"><a href="#codeup一键发布" class="headerlink" title="codeup一键发布"></a>codeup一键发布</h1><h2 id="添加codeup仓库"><a href="#添加codeup仓库" class="headerlink" title="添加codeup仓库"></a>添加codeup仓库</h2><p>将当前仓库加入到自己的codeup中</p><p><img src="20220512230442.png" alt="image-20220512230441057"></p><p>复制https地址 <a href="https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git">https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git</a></p><h2 id="初始化代码"><a href="#初始化代码" class="headerlink" title="初始化代码"></a>初始化代码</h2><p>将上面test1blog中，初始化，添加代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global init.defaultBranch main<br>git init<br>git remote add origin https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git<br></code></pre></td></tr></table></figure><p>添加文件 <code>.gitignore</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Logs</span><br>logs<br>*.<span class="hljs-built_in">log</span><br>npm-debug.log*<br>yarn-debug.log*<br>yarn-error.log*<br>lerna-debug.log*<br>.pnpm-debug.log*<br><br><span class="hljs-comment"># Diagnostic reports (https://nodejs.org/api/report.html)</span><br>report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json<br><br><span class="hljs-comment"># Runtime data</span><br>pids<br>*.pid<br>*.seed<br>*.pid.lock<br><br><span class="hljs-comment"># Directory for instrumented libs generated by jscoverage/JSCover</span><br>lib-cov<br><br><span class="hljs-comment"># Coverage directory used by tools like istanbul</span><br>coverage<br>*.lcov<br><br><span class="hljs-comment"># nyc test coverage</span><br>.nyc_output<br><br><span class="hljs-comment"># Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)</span><br>.grunt<br><br><span class="hljs-comment"># Bower dependency directory (https://bower.io/)</span><br>bower_components<br><br><span class="hljs-comment"># node-waf configuration</span><br>.lock-wscript<br><br><span class="hljs-comment"># Compiled binary addons (https://nodejs.org/api/addons.html)</span><br>build/Release<br><br><span class="hljs-comment"># Dependency directories</span><br>node_modules/<br>jspm_packages/<br><br><span class="hljs-comment"># Snowpack dependency directory (https://snowpack.dev/)</span><br>web_modules/<br><br><span class="hljs-comment"># TypeScript cache</span><br>*.tsbuildinfo<br><br><span class="hljs-comment"># Optional npm cache directory</span><br>.npm<br><br><span class="hljs-comment"># Optional eslint cache</span><br>.eslintcache<br><br><span class="hljs-comment"># Optional stylelint cache</span><br>.stylelintcache<br><br><span class="hljs-comment"># Microbundle cache</span><br>.rpt2_cache/<br>.rts2_cache_cjs/<br>.rts2_cache_es/<br>.rts2_cache_umd/<br><br><span class="hljs-comment"># Optional REPL history</span><br>.node_repl_history<br><br><span class="hljs-comment"># Output of &#x27;npm pack&#x27;</span><br>*.tgz<br><br><span class="hljs-comment"># Yarn Integrity file</span><br>.yarn-integrity<br><br><span class="hljs-comment"># dotenv environment variable files</span><br>.<span class="hljs-built_in">env</span><br>.env.development.local<br>.env.test.local<br>.env.production.local<br>.env.local<br><br><span class="hljs-comment"># parcel-bundler cache (https://parceljs.org/)</span><br>.cache<br>.parcel-cache<br><br><span class="hljs-comment"># Next.js build output</span><br>.next<br>out<br><br><span class="hljs-comment"># Nuxt.js build / generate output</span><br>.nuxt<br>dist<br><br><span class="hljs-comment"># Gatsby files</span><br>.cache/<br><span class="hljs-comment"># Comment in the public line in if your project uses Gatsby and not Next.js</span><br><span class="hljs-comment"># https://nextjs.org/blog/next-9-1#public-directory-support</span><br><span class="hljs-comment"># public</span><br><br><span class="hljs-comment"># vuepress build output</span><br>.vuepress/dist<br><br><span class="hljs-comment"># vuepress v2.x temp and cache directory</span><br>.temp<br>.cache<br><br><span class="hljs-comment"># Docusaurus cache and generated files</span><br>.docusaurus<br><br><span class="hljs-comment"># Serverless directories</span><br>.serverless/<br><br><span class="hljs-comment"># FuseBox cache</span><br>.fusebox/<br><br><span class="hljs-comment"># DynamoDB Local files</span><br>.dynamodb/<br><br><span class="hljs-comment"># TernJS port file</span><br>.tern-port<br><br><span class="hljs-comment"># Stores VSCode versions used for testing VSCode extensions</span><br>.vscode-test<br><br><span class="hljs-comment"># yarn v2</span><br>.yarn/cache<br>.yarn/unplugged<br>.yarn/build-state.yml<br>.yarn/install-state.gz<br>.pnp.*<br><br><br><span class="hljs-comment"># 静态文件</span><br>public <br></code></pre></td></tr></table></figure><h2 id="推送aliyun"><a href="#推送aliyun" class="headerlink" title="推送aliyun"></a>推送aliyun</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 状态</span><br>$ git status<br>hint: core.useBuiltinFSMonitor will be deprecated soon; use core.fsmonitor instead<br>hint: Disable this message with <span class="hljs-string">&quot;git config advice.useCoreFSMonitorConfig false&quot;</span><br>On branch main<br><br>No commits yet<br><br>Untracked files:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br>        .dockerignore<br>        .github/<br>        .gitignore<br>        .npmignore<br>        Dockerfile<br>        _config.landscape.yml<br>        _config.yml<br>        db.json<br>        id_rsa_2048<br>        package-lock.json<br>        package.json<br>        scaffolds/<br>        <span class="hljs-built_in">source</span>/<br>        themes/<br>        <br><span class="hljs-comment"># 生成标志</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;1111&#x27;</span> &gt;&gt; <span class="hljs-built_in">source</span>/_posts/hello-world.md<br><br><span class="hljs-comment"># 推送</span><br>git add . <br>git commit -m init<br><br>$ git push origin main<br>Enumerating objects: 122, <span class="hljs-keyword">done</span>.<br>Counting objects: 100% (122/122), <span class="hljs-keyword">done</span>.<br>Delta compression using up to 8 threads<br>Compressing objects: 100% (110/110), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (122/122), 580.00 KiB | 7.34 MiB/s, <span class="hljs-keyword">done</span>.<br>Total 122 (delta 0), reused 0 (delta 0), pack-reused 0<br>To https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git<br> * [new branch]      main -&gt; main<br><br></code></pre></td></tr></table></figure><h2 id="aliyun验证"><a href="#aliyun验证" class="headerlink" title="aliyun验证"></a>aliyun验证</h2><p><img src="20220512231059.png" alt="image-20220512231058218"></p><h2 id="添加流水线"><a href="#添加流水线" class="headerlink" title="添加流水线"></a>添加流水线</h2><p><img src="20220512231120.png" alt="image-20220512231118465"></p><p><img src="20220512231146.png" alt="image-20220512231145367"></p><p><img src="20220513000840.png" alt="image-20220513000838863"></p><p><img src="20220512231255.png" alt="image-20220512231253578"></p><p><img src="20220512231628.png" alt="image-20220512231626849"></p><p>删除kubernetes发布</p><p>保存并运行</p><p><img src="20220512231324.png" alt="image-20220512231322519"></p><h2 id="查看运行日志"><a href="#查看运行日志" class="headerlink" title="查看运行日志"></a>查看运行日志</h2><p><img src="20220512232021.png" alt="image-20220512232019242"></p><h2 id="查看github进度"><a href="#查看github进度" class="headerlink" title="查看github进度"></a>查看github进度</h2><p><img src="20220512232122.png" alt="image-20220512232121239"></p><h2 id="查看页面"><a href="#查看页面" class="headerlink" title="查看页面"></a>查看页面</h2><p>当进度为</p><p><img src="20220512232141.png" alt="image-20220512232140087"></p><p><img src="20220512232151.png" alt="image-20220512232150142"></p><h1 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h1><h2 id="准备vscode"><a href="#准备vscode" class="headerlink" title="准备vscode"></a>准备vscode</h2><p>在vscode中加载 codeup的仓库</p><p>安装插件 typora  <strong>安装后需要重启vscode</strong></p><p><img src="20220512231737.png" alt="image-20220512231735959"></p><h2 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># clone 代码</span><br><br><span class="hljs-comment"># 安装依赖</span><br>npm install<br><br><span class="hljs-comment"># 运行服务</span><br>npx hexo server<br></code></pre></td></tr></table></figure><blockquote><p><code>npx command</code> 相当于加载了<code>$(npm bin)</code> 目录到环境变量, 后面的命令可以执行</p></blockquote><p>通过本地调试出合理的界面, 推送aliyun, 就可以一键发布</p><h2 id="本地添加文章"><a href="#本地添加文章" class="headerlink" title="本地添加文章"></a>本地添加文章</h2><p>脚本 <code>addarticle.sh</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo -ne <span class="hljs-string">&quot;Enter a \033[1;31mtitle\033[0m for your blog: &quot;</span>; read title<br>[ $? -ne <span class="hljs-number">0</span> ] &amp;&amp; echo <span class="hljs-string">&#x27;exit&#x27;</span> &amp;&amp; sleep <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>[ -z <span class="hljs-string">&quot;$title&quot;</span> ] &amp;&amp; echo title must be exists. &amp;&amp; sleep <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>npx hexo new <span class="hljs-string">&quot;$title&quot;</span><br><br>start $(readlink -f .)<span class="hljs-regexp">/source/</span>_posts<br></code></pre></td></tr></table></figure><p>生成文章, 运行脚本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="个性化页面展示"><a href="#个性化页面展示" class="headerlink" title="个性化页面展示"></a>个性化页面展示</h2><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><ul><li><code>hexo站点配置</code></li><li><code>fluid</code>主题配置</li><li><code>阅读量</code></li><li><code>评论功能</code></li></ul><p>例如修改标题 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;5-12 23:30&quot;</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 处理typora相对路径</span><br>npm install hexo-typora-asset --registry https://registry.npmjs.org --save<br></code></pre></td></tr></table></figure><p>typora中的配置</p><p><img src="image-20220513092438970.png" alt="image-20220513092438970"></p><p>重启 <code>npx hexo server</code></p><p><img src="20220512233119.png" alt="image-20220512233117729"></p><h2 id="文章默认页面-可选"><a href="#文章默认页面-可选" class="headerlink" title="文章默认页面(可选)"></a>文章默认页面(可选)</h2><p><a href="https://hexo.io/docs/writing#Scaffolds">https://hexo.io/docs/writing#Scaffolds</a></p><p>当我们写大量的文章,发现主页不应该显示所有内容,需要readmore, readmore之前有1小段简介</p><p>如下, 上面的nginx文章会<code>显示标题,简介,readmore</code>, 而下面的hello world就显示所有, 这两者区别在于</p><p>后者,默认</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>前者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">这篇讲解如何编译安装nginx,</span> <span class="hljs-string">优化nginx</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p><img src="20220512234116.png" alt="image-20220512234114962"></p><p>要实现每个文章创建均生成nginx这样的模板, 编辑 <code>scaffolds/post.md</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p>现在运行脚本 <code>addarticle.sh</code> 添加<strong>第2个文章</strong></p><p>网页已经达到效果</p><p><img src="20220512234553.png" alt="image-20220512234551537"></p><h2 id="准备一个主题-fluid"><a href="#准备一个主题-fluid" class="headerlink" title="准备一个主题 fluid"></a>准备一个主题 fluid</h2><blockquote><p>使用此主题后, 不需要前面的文章默认页面, 每个页面不需要加<code>&lt;!--more--&gt;</code> 主题会自动抽取前多少个字符,作为描述的.</p></blockquote><p>Fluid主题 <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git submodule add https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><p>编辑 <code>_config.yml</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: fluid<br></code></pre></td></tr></table></figure><p>重启 <code>npx hexo server</code></p><p><img src="20220512235039.png" alt="image-20220512235038001"></p><p>配置主题 <code>fluid</code> 需要准备一个文件 <code>_config.主题名.yml</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp themes<span class="hljs-regexp">/fluid/</span>_config.yml _config.fluid.yml<br></code></pre></td></tr></table></figure><p>测试配置是否生效,修改 <code>_config.fluid.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首页副标题的独立设置</span><br><span class="hljs-comment"># Independent config of home page subtitle</span><br><span class="hljs-attr">slogan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>  <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;Hello 05-12 .... &quot;</span><br></code></pre></td></tr></table></figure><p>重启 <code>npx hexo server</code></p><p><img src="20220512235647.png" alt="image-20220512235645718"></p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>准备脚本 <code>push.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git config --<span class="hljs-built_in">local</span> pull.rebase <span class="hljs-literal">true</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;笔记本-`date +%F_%T`&quot;</span><br><br><br>git push origin main<br><br>git pull origin main<br>[ $? -ne 0 ] &amp;&amp; <span class="hljs-built_in">exit</span> -1<br><br>git push origin main<br><br><span class="hljs-comment"># test</span><br>start $(<span class="hljs-built_in">readlink</span> -f .)/source/_posts<br></code></pre></td></tr></table></figure><p><a href="https://slcnx.github.io/">https://slcnx.github.io/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
